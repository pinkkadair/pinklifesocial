generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  username             String             @unique
  name                 String?
  bio                  String?
  image                String?
  location             String?
  website              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  lastBeautyRiskPost   String?
  lastBeautyRiskScore  Int?
  subscriptionTier     SubscriptionTier   @default(FREE)
  emailVerified        DateTime?
  password             String?
  stripeCustomerId     String?            @unique
  subscriptionId       String?
  subscriptionStatus   String?
  accounts             Account[]
  beautyRisk           BeautyRisk?
  comments             Comment[]
  following            Follows[]          @relation("follower")
  followers            Follows[]          @relation("following")
  globalTeaComments    GlobalTeaComment[]
  globalTeaPosts       GlobalTeaPost[]
  answers              KrisAnswer[]
  questions            KrisQuestion[]
  likes                Like[]
  notificationsCreated Notification[]     @relation("notificationCreator")
  notifications        Notification[]     @relation("userNotifications")
  posts                Post[]
  sessions             Session[]
  hostedWorkshops       Workshop[]       @relation("WorkshopHost")
  attendedWorkshops     Workshop[]       @relation("WorkshopAttendees")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String         @id @default(cuid())
  authorId      String
  content       String?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comment[]
  likes         Like[]         @relation("PostLike")
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Comment {
  id            String         @id @default(cuid())
  content       String
  authorId      String
  postId        String
  createdAt     DateTime       @default(now())
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation("PostLike", fields: [postId], references: [id], onDelete: Cascade, map: "Like_postId_post_fkey")
  globalTeaPost GlobalTeaPost? @relation("GlobalTeaPostLike", fields: [postId], references: [id], onDelete: Cascade, map: "Like_postId_globalTeaPost_fkey")

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  commentId String?
  createdAt DateTime         @default(now())
  comment   Comment?         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  creator   User             @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User             @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model KrisQuestion {
  id         String         @id @default(cuid())
  title      String
  content    String
  status     QuestionStatus @default(PENDING)
  language   String         @default("en")
  categoryId String
  authorId   String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  answers    KrisAnswer[]
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category   KrisCategory   @relation(fields: [categoryId], references: [id])

  @@index([authorId, status])
  @@index([categoryId])
}

model KrisAnswer {
  id         String       @id @default(cuid())
  content    String
  questionId String
  authorId   String
  language   String       @default("en")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   KrisQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([questionId])
  @@index([authorId])
}

model KrisCategory {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  questions   KrisQuestion[]
}

model GlobalTeaPost {
  id        String   @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  type      TeaType  @default(SPILL)

  // Relations
  author    User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  GlobalTeaComment[]
  likes     Like[]            @relation("GlobalTeaPostLike")
  tags      GlobalTeaTag[]    @relation("GlobalTeaPostToTag")

  @@index([authorId])
}

model GlobalTeaComment {
  id        String        @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime      @default(now())
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      GlobalTeaPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId])
}

model GlobalTeaTag {
  id          String   @id @default(cuid())
  name        String   @unique
  createdAt   DateTime @default(now())
  
  // Relations
  posts       GlobalTeaPost[] @relation("GlobalTeaPostToTag")
}

model BeautyRisk {
  id          String             @id @default(cuid())
  userId      String             @unique
  riskScore   Int
  lastUpdated DateTime           @default(now())
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  factors     BeautyRiskFactor[]

  @@index([userId])
}

model BeautyRiskFactor {
  id             String         @id @default(cuid())
  beautyRiskId   String
  type           RiskFactorType
  severity       RiskSeverity
  description    String
  recommendation String?
  createdAt      DateTime       @default(now())
  beautyRisk     BeautyRisk     @relation(fields: [beautyRiskId], references: [id], onDelete: Cascade)

  @@index([beautyRiskId])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

enum QuestionStatus {
  PENDING
  ANSWERED
  FEATURED
  ARCHIVED
}

enum TeaType {
  BEAUTY_WISDOM
  TRENDING
  COMMUNITY_SPOTLIGHT
  LOCAL_TEA
  SPILL
}

enum RiskFactorType {
  SKIN
  HAIR
  MAKEUP
  LIFESTYLE
  ENVIRONMENTAL
  PRODUCT
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SubscriptionTier {
  FREE
  PINKU
  VIP
}

// Workshop and scheduling models
model Workshop {
  id          String      @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  maxAttendees Int
  host        User        @relation("WorkshopHost", fields: [hostId], references: [id])
  hostId      String
  attendees   User[]      @relation("WorkshopAttendees")
  category    String
  level       String      @default("BEGINNER")
  status      String      @default("SCHEDULED") // SCHEDULED, CANCELLED, COMPLETED
  recording   String?     // URL to recorded session
  materials   String?     // URL to workshop materials
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([hostId])
}
